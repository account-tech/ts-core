/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

/* Generated types for 0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62, original address 0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62 */

import { TypeDescriptor, ANY_TYPE } from "@typemove/move";
import { MoveCoder, TypedEventInstance } from "@typemove/sui";

import { defaultMoveCoder } from "@typemove/sui";

import {
  ZERO_ADDRESS,
  TypedDevInspectResults,
  getMoveCoder,
} from "@typemove/sui";
import {
  TransactionBlock,
  TransactionArgument,
  TransactionObjectArgument,
} from "@mysten/sui.js/transactions";
import { SuiClient } from "@mysten/sui.js/client";
import {
  transactionArgumentOrObject,
  transactionArgumentOrPure,
  transactionArgumentOrVec,
} from "@typemove/sui";

import { _0x2 } from "@typemove/sui/builtin";
import { _0x1 } from "@typemove/sui/builtin";

export namespace account {
  export interface Account {
    id: _0x2.object_.UID;
    username: string;
    profile_picture: string;
    multisig_ids: _0x2.vec_set.VecSet<_0x2.object_.ID>;
  }

  export namespace Account {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::account::Account";

    const TYPE = new TypeDescriptor<Account>(Account.TYPE_QNAME);

    export function type(): TypeDescriptor<Account> {
      return TYPE.apply();
    }
  }

  export interface Invite {
    id: _0x2.object_.UID;
    multisig_id: _0x2.object_.ID;
  }

  export namespace Invite {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::account::Invite";

    const TYPE = new TypeDescriptor<Invite>(Invite.TYPE_QNAME);

    export function type(): TypeDescriptor<Invite> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function acceptInvite(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        account.Invite | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::account::accept_invite",
        arguments: _args,
      });
    }
    export function destroy(
      tx: TransactionBlock,
      args: [account.Account | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::account::destroy",
        arguments: _args,
      });
    }
    export function joinMultisig(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::account::join_multisig",
        arguments: _args,
      });
    }
    export function leaveMultisig(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::account::leave_multisig",
        arguments: _args,
      });
    }
    export function multisigId(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::account::multisig_id",
        arguments: _args,
      });
    }
    export function multisigIds(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::account::multisig_ids",
        arguments: _args,
      });
    }
    export function new_(
      tx: TransactionBlock,
      args: [string | TransactionArgument, string | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::account::new",
        arguments: _args,
      });
    }
    export function profilePicture(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::account::profile_picture",
        arguments: _args,
      });
    }
    export function refuseInvite(
      tx: TransactionBlock,
      args: [account.Invite | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::account::refuse_invite",
        arguments: _args,
      });
    }
    export function sendInvite(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::account::send_invite",
        arguments: _args,
      });
    }
    export function username(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::account::username",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function acceptInvite(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        account.Invite | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.acceptInvite(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function destroy(
      client: SuiClient,
      args: [account.Account | TransactionArgument],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.destroy(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function joinMultisig(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.joinMultisig(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function leaveMultisig(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.leaveMultisig(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function multisigId(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[_0x2.object_.ID]>> {
      const tx = new TransactionBlock();
      builder.multisigId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.object_.ID]
      >(inspectRes);
    }
    export async function multisigIds(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[_0x2.object_.ID[]]>> {
      const tx = new TransactionBlock();
      builder.multisigIds(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.object_.ID[]]
      >(inspectRes);
    }
    export async function new_(
      client: SuiClient,
      args: [string | TransactionArgument, string | TransactionArgument],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function profilePicture(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.profilePicture(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function refuseInvite(
      client: SuiClient,
      args: [account.Invite | TransactionArgument],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.refuseInvite(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function sendInvite(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.sendInvite(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function username(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.username(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
  }
}

export namespace coin_operations {
  export namespace builder {
    export function merge<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<_0x2.coin.Coin<T0>> | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::coin_operations::merge",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function split<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<_0x2.coin.Coin<T0>> | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::coin_operations::split",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function merge<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<_0x2.coin.Coin<T0>> | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.merge(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function split<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<_0x2.coin.Coin<T0>> | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x2.object_.ID[]]>> {
      const tx = new TransactionBlock();
      builder.split(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.object_.ID[]]
      >(inspectRes);
    }
  }
}

export namespace config {
  export interface Migrate {
    version: bigint;
  }

  export namespace Migrate {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::config::Migrate";

    const TYPE = new TypeDescriptor<Migrate>(Migrate.TYPE_QNAME);

    export function type(): TypeDescriptor<Migrate> {
      return TYPE.apply();
    }
  }

  export interface Modify {
    name: _0x1.option.Option<string>;
    threshold: _0x1.option.Option<bigint>;
    to_remove: string[];
    to_add: string[];
    weights: bigint[];
  }

  export namespace Modify {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::config::Modify";

    const TYPE = new TypeDescriptor<Modify>(Modify.TYPE_QNAME);

    export function type(): TypeDescriptor<Modify> {
      return TYPE.apply();
    }
  }

  export interface Witness {
    dummy_field: Boolean;
  }

  export namespace Witness {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::config::Witness";

    const TYPE = new TypeDescriptor<Witness>(Witness.TYPE_QNAME);

    export function type(): TypeDescriptor<Witness> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function destroyMigrate<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::config::destroy_migrate",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function destroyModify<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::config::destroy_modify",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function executeMigrate(
      tx: TransactionBlock,
      args: [
        multisig.Executable | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::config::execute_migrate",
        arguments: _args,
      });
    }
    export function executeModify(
      tx: TransactionBlock,
      args: [
        multisig.Executable | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::config::execute_modify",
        arguments: _args,
      });
    }
    export function migrate<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::config::migrate",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function modify<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::config::modify",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function newMigrate(
      tx: TransactionBlock,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::config::new_migrate",
        arguments: _args,
      });
    }
    export function newModify(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.option.Option<string> | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::config::new_modify",
        arguments: _args,
      });
    }
    export function proposeMigrate(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::config::propose_migrate",
        arguments: _args,
      });
    }
    export function proposeModify(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        _0x1.option.Option<string> | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrVec(args[7], tx));
      _args.push(transactionArgumentOrVec(args[8], tx));
      _args.push(transactionArgumentOrVec(args[9], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::config::propose_modify",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function destroyMigrate<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.destroyMigrate(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function destroyModify<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<
        [
          _0x1.option.Option<string>,
          _0x1.option.Option<bigint>,
          string[],
          string[],
          bigint[],
        ]
      >
    > {
      const tx = new TransactionBlock();
      builder.destroyModify(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0x1.option.Option<string>,
          _0x1.option.Option<bigint>,
          string[],
          string[],
          bigint[],
        ]
      >(inspectRes);
    }
    export async function executeMigrate(
      client: SuiClient,
      args: [
        multisig.Executable | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.executeMigrate(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function executeModify(
      client: SuiClient,
      args: [
        multisig.Executable | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.executeModify(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function migrate<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.migrate(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function modify<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.modify(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function newMigrate(
      client: SuiClient,
      args: [bigint | TransactionArgument],
    ): Promise<TypedDevInspectResults<[config.Migrate]>> {
      const tx = new TransactionBlock();
      builder.newMigrate(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [config.Migrate]
      >(inspectRes);
    }
    export async function newModify(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.option.Option<string> | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[config.Modify]>> {
      const tx = new TransactionBlock();
      builder.newModify(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [config.Modify]
      >(inspectRes);
    }
    export async function proposeMigrate(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.proposeMigrate(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function proposeModify(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        _0x1.option.Option<string> | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.proposeModify(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace kiosk {
  export interface KioskOwnerLock {
    id: _0x2.object_.UID;
    kiosk_owner_cap: _0x2.kiosk.KioskOwnerCap;
  }

  export namespace KioskOwnerLock {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::kiosk::KioskOwnerLock";

    const TYPE = new TypeDescriptor<KioskOwnerLock>(KioskOwnerLock.TYPE_QNAME);

    export function type(): TypeDescriptor<KioskOwnerLock> {
      return TYPE.apply();
    }
  }

  export interface List {
    nft_ids: _0x2.object_.ID[];
    prices: bigint[];
  }

  export namespace List {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::kiosk::List";

    const TYPE = new TypeDescriptor<List>(List.TYPE_QNAME);

    export function type(): TypeDescriptor<List> {
      return TYPE.apply();
    }
  }

  export interface Take {
    nft_ids: _0x2.object_.ID[];
    recipient: string;
  }

  export namespace Take {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::kiosk::Take";

    const TYPE = new TypeDescriptor<Take>(Take.TYPE_QNAME);

    export function type(): TypeDescriptor<Take> {
      return TYPE.apply();
    }
  }

  export interface Witness {
    dummy_field: Boolean;
  }

  export namespace Witness {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::kiosk::Witness";

    const TYPE = new TypeDescriptor<Witness>(Witness.TYPE_QNAME);

    export function type(): TypeDescriptor<Witness> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function borrowCap(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<kiosk.KioskOwnerLock> | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::kiosk::borrow_cap",
        arguments: _args,
      });
    }
    export function completeList(
      tx: TransactionBlock,
      args: [multisig.Executable | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::kiosk::complete_list",
        arguments: _args,
      });
    }
    export function completeTake(
      tx: TransactionBlock,
      args: [multisig.Executable | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::kiosk::complete_take",
        arguments: _args,
      });
    }
    export function delist<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::kiosk::delist",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function destroyList(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::kiosk::destroy_list",
        arguments: _args,
      });
    }
    export function destroyTake(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::kiosk::destroy_take",
        arguments: _args,
      });
    }
    export function executeList<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::kiosk::execute_list",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function executeTake<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::kiosk::execute_take",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function list<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::kiosk::list",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function new_(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::kiosk::new",
        arguments: _args,
      });
    }
    export function newList(
      tx: TransactionBlock,
      args: [
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::kiosk::new_list",
        arguments: _args,
      });
    }
    export function newTake(
      tx: TransactionBlock,
      args: [
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::kiosk::new_take",
        arguments: _args,
      });
    }
    export function place<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::kiosk::place",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function proposeList(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrVec(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::kiosk::propose_list",
        arguments: _args,
      });
    }
    export function proposeTake(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::kiosk::propose_take",
        arguments: _args,
      });
    }
    export function putBackCap(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        kiosk.KioskOwnerLock | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::kiosk::put_back_cap",
        arguments: _args,
      });
    }
    export function take<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::kiosk::take",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function withdrawProfits(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::kiosk::withdraw_profits",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function borrowCap(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<kiosk.KioskOwnerLock> | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[kiosk.KioskOwnerLock]>> {
      const tx = new TransactionBlock();
      builder.borrowCap(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [kiosk.KioskOwnerLock]
      >(inspectRes);
    }
    export async function completeList(
      client: SuiClient,
      args: [multisig.Executable | TransactionArgument],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.completeList(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function completeTake(
      client: SuiClient,
      args: [multisig.Executable | TransactionArgument],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.completeTake(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function delist<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.delist(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function destroyList(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[_0x2.object_.ID[], bigint[]]>> {
      const tx = new TransactionBlock();
      builder.destroyList(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.object_.ID[], bigint[]]
      >(inspectRes);
    }
    export async function destroyTake(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[_0x2.object_.ID[], string]>> {
      const tx = new TransactionBlock();
      builder.destroyTake(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.object_.ID[], string]
      >(inspectRes);
    }
    export async function executeList<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.executeList(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function executeTake<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.executeTake(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function list<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.list(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function new_(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function newList(
      client: SuiClient,
      args: [
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[kiosk.List]>> {
      const tx = new TransactionBlock();
      builder.newList(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[kiosk.List]>(
        inspectRes,
      );
    }
    export async function newTake(
      client: SuiClient,
      args: [
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[kiosk.Take]>> {
      const tx = new TransactionBlock();
      builder.newTake(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[kiosk.Take]>(
        inspectRes,
      );
    }
    export async function place<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.place(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function proposeList(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.proposeList(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function proposeTake(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.proposeTake(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function putBackCap(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        kiosk.KioskOwnerLock | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.putBackCap(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function take<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.take(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function withdrawProfits(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.withdrawProfits(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace multisig {
  export interface Executable {
    multisig_addr: string;
    module_witness: _0x1.type_name.TypeName;
    actions: _0x2.bag.Bag;
  }

  export namespace Executable {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::Executable";

    const TYPE = new TypeDescriptor<Executable>(Executable.TYPE_QNAME);

    export function type(): TypeDescriptor<Executable> {
      return TYPE.apply();
    }
  }

  export interface Member {
    weight: bigint;
    account_id: _0x1.option.Option<_0x2.object_.ID>;
  }

  export namespace Member {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::Member";

    const TYPE = new TypeDescriptor<Member>(Member.TYPE_QNAME);

    export function type(): TypeDescriptor<Member> {
      return TYPE.apply();
    }
  }

  export interface Multisig {
    id: _0x2.object_.UID;
    version: bigint;
    name: string;
    threshold: bigint;
    total_weight: bigint;
    members: _0x2.vec_map.VecMap<string, multisig.Member>;
    proposals: _0x2.vec_map.VecMap<string, multisig.Proposal>;
  }

  export namespace Multisig {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::Multisig";

    const TYPE = new TypeDescriptor<Multisig>(Multisig.TYPE_QNAME);

    export function type(): TypeDescriptor<Multisig> {
      return TYPE.apply();
    }
  }

  export interface Proposal {
    id: _0x2.object_.UID;
    module_witness: _0x1.type_name.TypeName;
    description: string;
    expiration_epoch: bigint;
    execution_time: bigint;
    actions: _0x2.bag.Bag;
    approval_weight: bigint;
    approved: _0x2.vec_set.VecSet<string>;
  }

  export namespace Proposal {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::Proposal";

    const TYPE = new TypeDescriptor<Proposal>(Proposal.TYPE_QNAME);

    export function type(): TypeDescriptor<Proposal> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function actionMut<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::action_mut",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function addMembers(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::add_members",
        arguments: _args,
      });
    }
    export function addr(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::addr",
        arguments: _args,
      });
    }
    export function approveProposal(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::approve_proposal",
        arguments: _args,
      });
    }
    export function approved(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::approved",
        arguments: _args,
      });
    }
    export function assertIsMember(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::assert_is_member",
        arguments: _args,
      });
    }
    export function assertMultisigExecuted(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::assert_multisig_executed",
        arguments: _args,
      });
    }
    export function assertVersion(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::assert_version",
        arguments: _args,
      });
    }
    export function createProposal<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::create_proposal",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function deleteProposal(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::delete_proposal",
        arguments: _args,
      });
    }
    export function description(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::description",
        arguments: _args,
      });
    }
    export function destroyExecutable<T0 = any>(
      tx: TransactionBlock,
      args: [
        multisig.Executable | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::destroy_executable",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function executableLastActionIdx(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::executable_last_action_idx",
        arguments: _args,
      });
    }
    export function executableMultisigAddr(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::executable_multisig_addr",
        arguments: _args,
      });
    }
    export function executeProposal(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::execute_proposal",
        arguments: _args,
      });
    }
    export function executionTime(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::execution_time",
        arguments: _args,
      });
    }
    export function expirationEpoch(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::expiration_epoch",
        arguments: _args,
      });
    }
    export function isMember(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::is_member",
        arguments: _args,
      });
    }
    export function memberAccountId(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::member_account_id",
        arguments: _args,
      });
    }
    export function memberAddresses(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::member_addresses",
        arguments: _args,
      });
    }
    export function memberWeight(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::member_weight",
        arguments: _args,
      });
    }
    export function name(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::name",
        arguments: _args,
      });
    }
    export function new_(
      tx: TransactionBlock,
      args: [
        string | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::new",
        arguments: _args,
      });
    }
    export function numOfProposals(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::num_of_proposals",
        arguments: _args,
      });
    }
    export function popAction<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::pop_action",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function proposal(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::proposal",
        arguments: _args,
      });
    }
    export function pushAction<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::push_action",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function registerAccountId(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::register_account_id",
        arguments: _args,
      });
    }
    export function removeApproval(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::remove_approval",
        arguments: _args,
      });
    }
    export function removeMembers(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::remove_members",
        arguments: _args,
      });
    }
    export function setName(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::set_name",
        arguments: _args,
      });
    }
    export function setThreshold(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::set_threshold",
        arguments: _args,
      });
    }
    export function setVersion(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::set_version",
        arguments: _args,
      });
    }
    export function share(
      tx: TransactionBlock,
      args: [multisig.Multisig | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::share",
        arguments: _args,
      });
    }
    export function threshold(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::threshold",
        arguments: _args,
      });
    }
    export function totalWeight(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::total_weight",
        arguments: _args,
      });
    }
    export function uidMut(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::uid_mut",
        arguments: _args,
      });
    }
    export function unregisterAccountId(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::multisig::unregister_account_id",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function actionMut<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.actionMut(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function addMembers(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.addMembers(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function addr(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.addr(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function approveProposal(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.approveProposal(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function approved(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string[]]>> {
      const tx = new TransactionBlock();
      builder.approved(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string[]]>(
        inspectRes,
      );
    }
    export async function assertIsMember(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.assertIsMember(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function assertMultisigExecuted(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.assertMultisigExecuted(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function assertVersion(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.assertVersion(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function createProposal<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.createProposal(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function deleteProposal(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[_0x2.bag.Bag]>> {
      const tx = new TransactionBlock();
      builder.deleteProposal(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.bag.Bag]
      >(inspectRes);
    }
    export async function description(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.description(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function destroyExecutable<T0 = any>(
      client: SuiClient,
      args: [
        multisig.Executable | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.destroyExecutable(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function executableLastActionIdx(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.executableLastActionIdx(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function executableMultisigAddr(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.executableMultisigAddr(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function executeProposal(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[multisig.Executable]>> {
      const tx = new TransactionBlock();
      builder.executeProposal(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [multisig.Executable]
      >(inspectRes);
    }
    export async function executionTime(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.executionTime(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function expirationEpoch(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.expirationEpoch(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function isMember(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[Boolean]>> {
      const tx = new TransactionBlock();
      builder.isMember(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[Boolean]>(
        inspectRes,
      );
    }
    export async function memberAccountId(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[_0x1.option.Option<_0x2.object_.ID>]>> {
      const tx = new TransactionBlock();
      builder.memberAccountId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.option.Option<_0x2.object_.ID>]
      >(inspectRes);
    }
    export async function memberAddresses(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string[]]>> {
      const tx = new TransactionBlock();
      builder.memberAddresses(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string[]]>(
        inspectRes,
      );
    }
    export async function memberWeight(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.memberWeight(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function name(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.name(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function new_(
      client: SuiClient,
      args: [
        string | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[multisig.Multisig]>> {
      const tx = new TransactionBlock();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [multisig.Multisig]
      >(inspectRes);
    }
    export async function numOfProposals(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.numOfProposals(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function popAction<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[T1]>> {
      const tx = new TransactionBlock();
      builder.popAction(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[T1]>(
        inspectRes,
      );
    }
    export async function proposal(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.proposal(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function pushAction<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.pushAction(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function registerAccountId(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.registerAccountId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function removeApproval(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.removeApproval(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function removeMembers(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.removeMembers(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function setName(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.setName(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function setThreshold(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.setThreshold(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function setVersion(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.setVersion(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function share(
      client: SuiClient,
      args: [multisig.Multisig | TransactionArgument],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.share(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function threshold(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.threshold(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function totalWeight(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.totalWeight(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function uidMut(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.uidMut(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function unregisterAccountId(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[_0x2.object_.ID]>> {
      const tx = new TransactionBlock();
      builder.unregisterAccountId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.object_.ID]
      >(inspectRes);
    }
  }
}

export namespace owned {
  export interface Borrow {
    to_return: _0x2.object_.ID[];
  }

  export namespace Borrow {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::owned::Borrow";

    const TYPE = new TypeDescriptor<Borrow>(Borrow.TYPE_QNAME);

    export function type(): TypeDescriptor<Borrow> {
      return TYPE.apply();
    }
  }

  export interface Withdraw {
    objects: _0x2.object_.ID[];
  }

  export namespace Withdraw {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::owned::Withdraw";

    const TYPE = new TypeDescriptor<Withdraw>(Withdraw.TYPE_QNAME);

    export function type(): TypeDescriptor<Withdraw> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function borrow<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        _0x2.transfer.Receiving<T1> | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::owned::borrow",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function destroyBorrow<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::owned::destroy_borrow",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function destroyWithdraw<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::owned::destroy_withdraw",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function newBorrow(
      tx: TransactionBlock,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::owned::new_borrow",
        arguments: _args,
      });
    }
    export function newWithdraw(
      tx: TransactionBlock,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::owned::new_withdraw",
        arguments: _args,
      });
    }
    export function putBack<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        T1 | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::owned::put_back",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function withdraw<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        _0x2.transfer.Receiving<T1> | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::owned::withdraw",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function borrow<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        _0x2.transfer.Receiving<T1> | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[T1]>> {
      const tx = new TransactionBlock();
      builder.borrow(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[T1]>(
        inspectRes,
      );
    }
    export async function destroyBorrow<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.destroyBorrow(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function destroyWithdraw<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.destroyWithdraw(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function newBorrow(
      client: SuiClient,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument],
    ): Promise<TypedDevInspectResults<[owned.Borrow]>> {
      const tx = new TransactionBlock();
      builder.newBorrow(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [owned.Borrow]
      >(inspectRes);
    }
    export async function newWithdraw(
      client: SuiClient,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument],
    ): Promise<TypedDevInspectResults<[owned.Withdraw]>> {
      const tx = new TransactionBlock();
      builder.newWithdraw(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [owned.Withdraw]
      >(inspectRes);
    }
    export async function putBack<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        T1 | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.putBack(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function withdraw<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        _0x2.transfer.Receiving<T1> | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[T1]>> {
      const tx = new TransactionBlock();
      builder.withdraw(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[T1]>(
        inspectRes,
      );
    }
  }
}

export namespace payments {
  export interface Pay {
    amount: bigint;
    interval: bigint;
    recipient: string;
  }

  export namespace Pay {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::payments::Pay";

    const TYPE = new TypeDescriptor<Pay>(Pay.TYPE_QNAME);

    export function type(): TypeDescriptor<Pay> {
      return TYPE.apply();
    }
  }

  export interface Stream<T0> {
    id: _0x2.object_.UID;
    balance: _0x2.balance.Balance<T0>;
    amount: bigint;
    interval: bigint;
    last_epoch: bigint;
    recipient: string;
  }

  export namespace Stream {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::payments::Stream";

    const TYPE = new TypeDescriptor<Stream<any>>(Stream.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<Stream<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface Witness {
    dummy_field: Boolean;
  }

  export namespace Witness {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::payments::Witness";

    const TYPE = new TypeDescriptor<Witness>(Witness.TYPE_QNAME);

    export function type(): TypeDescriptor<Witness> {
      return TYPE.apply();
    }
  }

  export interface WitnessInstance extends TypedEventInstance<Witness> {
    data_decoded: Witness;
    type_arguments: [];
  }

  export namespace builder {
    export function cancelPaymentStream<T0 = any>(
      tx: TransactionBlock,
      args: [
        payments.Stream<T0> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::payments::cancel_payment_stream",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function destroyEmptyStream<T0 = any>(
      tx: TransactionBlock,
      args: [payments.Stream<T0> | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::payments::destroy_empty_stream",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function destroyPay<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::payments::destroy_pay",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function disburse<T0 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::payments::disburse",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function executePay<T0 = any>(
      tx: TransactionBlock,
      args: [
        multisig.Executable | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<_0x2.coin.Coin<T0>> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::payments::execute_pay",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function newPay(
      tx: TransactionBlock,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::payments::new_pay",
        arguments: _args,
      });
    }
    export function pay<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<_0x2.coin.Coin<T1>> | TransactionArgument,
        T0 | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::payments::pay",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function proposePay(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrPure(args[7], tx));
      _args.push(transactionArgumentOrPure(args[8], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::payments::propose_pay",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function cancelPaymentStream<T0 = any>(
      client: SuiClient,
      args: [
        payments.Stream<T0> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.cancelPaymentStream(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function destroyEmptyStream<T0 = any>(
      client: SuiClient,
      args: [payments.Stream<T0> | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.destroyEmptyStream(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function destroyPay<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint, bigint, string]>> {
      const tx = new TransactionBlock();
      builder.destroyPay(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint, string]
      >(inspectRes);
    }
    export async function disburse<T0 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.disburse(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function executePay<T0 = any>(
      client: SuiClient,
      args: [
        multisig.Executable | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<_0x2.coin.Coin<T0>> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.executePay(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function newPay(
      client: SuiClient,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[payments.Pay]>> {
      const tx = new TransactionBlock();
      builder.newPay(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [payments.Pay]
      >(inspectRes);
    }
    export async function pay<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<_0x2.coin.Coin<T1>> | TransactionArgument,
        T0 | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.pay(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function proposePay(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.proposePay(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace transfers {
  export interface Deliver {
    recipient: string;
  }

  export namespace Deliver {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::transfers::Deliver";

    const TYPE = new TypeDescriptor<Deliver>(Deliver.TYPE_QNAME);

    export function type(): TypeDescriptor<Deliver> {
      return TYPE.apply();
    }
  }

  export interface Delivery {
    id: _0x2.object_.UID;
    multisig_id: _0x2.object_.ID;
    objects: _0x2.bag.Bag;
  }

  export namespace Delivery {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::transfers::Delivery";

    const TYPE = new TypeDescriptor<Delivery>(Delivery.TYPE_QNAME);

    export function type(): TypeDescriptor<Delivery> {
      return TYPE.apply();
    }
  }

  export interface DeliveryCap {
    id: _0x2.object_.UID;
    delivery_id: _0x2.object_.ID;
  }

  export namespace DeliveryCap {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::transfers::DeliveryCap";

    const TYPE = new TypeDescriptor<DeliveryCap>(DeliveryCap.TYPE_QNAME);

    export function type(): TypeDescriptor<DeliveryCap> {
      return TYPE.apply();
    }
  }

  export interface Send {
    transfers: _0x2.vec_map.VecMap<_0x2.object_.ID, string>;
  }

  export namespace Send {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::transfers::Send";

    const TYPE = new TypeDescriptor<Send>(Send.TYPE_QNAME);

    export function type(): TypeDescriptor<Send> {
      return TYPE.apply();
    }
  }

  export interface Witness {
    dummy_field: Boolean;
  }

  export namespace Witness {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::transfers::Witness";

    const TYPE = new TypeDescriptor<Witness>(Witness.TYPE_QNAME);

    export function type(): TypeDescriptor<Witness> {
      return TYPE.apply();
    }
  }

  export interface WitnessInstance extends TypedEventInstance<Witness> {
    data_decoded: Witness;
    type_arguments: [];
  }

  export namespace builder {
    export function cancelDelivery(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        transfers.Delivery | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::transfers::cancel_delivery",
        arguments: _args,
      });
    }
    export function claim<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::transfers::claim",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function completeDeliver(
      tx: TransactionBlock,
      args: [
        transfers.Delivery | TransactionArgument,
        transfers.DeliveryCap | TransactionArgument,
        multisig.Executable | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::transfers::complete_deliver",
        arguments: _args,
      });
    }
    export function completeSend(
      tx: TransactionBlock,
      args: [multisig.Executable | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::transfers::complete_send",
        arguments: _args,
      });
    }
    export function confirmDelivery(
      tx: TransactionBlock,
      args: [
        transfers.Delivery | TransactionArgument,
        transfers.DeliveryCap | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::transfers::confirm_delivery",
        arguments: _args,
      });
    }
    export function createDelivery(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::transfers::create_delivery",
        arguments: _args,
      });
    }
    export function deliver<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        _0x2.transfer.Receiving<T1> | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::transfers::deliver",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function destroyDeliver<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::transfers::destroy_deliver",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function destroySend<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::transfers::destroy_send",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function executeDeliver<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::transfers::execute_deliver",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function executeSend<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::transfers::execute_send",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function newDeliver(
      tx: TransactionBlock,
      args: [string | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::transfers::new_deliver",
        arguments: _args,
      });
    }
    export function newSend(
      tx: TransactionBlock,
      args: [
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::transfers::new_send",
        arguments: _args,
      });
    }
    export function proposeDelivery(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::transfers::propose_delivery",
        arguments: _args,
      });
    }
    export function proposeSend(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrVec(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::transfers::propose_send",
        arguments: _args,
      });
    }
    export function retrieve<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::transfers::retrieve",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function send<T0 = any, T1 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        _0x2.transfer.Receiving<T1> | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::transfers::send",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function cancelDelivery(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        transfers.Delivery | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.cancelDelivery(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function claim<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[T0]>> {
      const tx = new TransactionBlock();
      builder.claim(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[T0]>(
        inspectRes,
      );
    }
    export async function completeDeliver(
      client: SuiClient,
      args: [
        transfers.Delivery | TransactionArgument,
        transfers.DeliveryCap | TransactionArgument,
        multisig.Executable | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.completeDeliver(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function completeSend(
      client: SuiClient,
      args: [multisig.Executable | TransactionArgument],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.completeSend(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function confirmDelivery(
      client: SuiClient,
      args: [
        transfers.Delivery | TransactionArgument,
        transfers.DeliveryCap | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.confirmDelivery(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function createDelivery(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<
      TypedDevInspectResults<[transfers.Delivery, transfers.DeliveryCap]>
    > {
      const tx = new TransactionBlock();
      builder.createDelivery(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [transfers.Delivery, transfers.DeliveryCap]
      >(inspectRes);
    }
    export async function deliver<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        _0x2.transfer.Receiving<T1> | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.deliver(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function destroyDeliver<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.destroyDeliver(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function destroySend<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.destroySend(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function executeDeliver<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.executeDeliver(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function executeSend<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.executeSend(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function newDeliver(
      client: SuiClient,
      args: [string | TransactionArgument],
    ): Promise<TypedDevInspectResults<[transfers.Deliver]>> {
      const tx = new TransactionBlock();
      builder.newDeliver(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [transfers.Deliver]
      >(inspectRes);
    }
    export async function newSend(
      client: SuiClient,
      args: [
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[transfers.Send]>> {
      const tx = new TransactionBlock();
      builder.newSend(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [transfers.Send]
      >(inspectRes);
    }
    export async function proposeDelivery(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.proposeDelivery(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function proposeSend(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.proposeSend(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function retrieve<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.retrieve(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function send<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        _0x2.transfer.Receiving<T1> | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.send(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace upgrade_policies {
  export interface Restrict {
    policy: number;
    lock_id: _0x2.object_.ID;
  }

  export namespace Restrict {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::upgrade_policies::Restrict";

    const TYPE = new TypeDescriptor<Restrict>(Restrict.TYPE_QNAME);

    export function type(): TypeDescriptor<Restrict> {
      return TYPE.apply();
    }
  }

  export interface TimeLock {
    delay_ms: bigint;
  }

  export namespace TimeLock {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::upgrade_policies::TimeLock";

    const TYPE = new TypeDescriptor<TimeLock>(TimeLock.TYPE_QNAME);

    export function type(): TypeDescriptor<TimeLock> {
      return TYPE.apply();
    }
  }

  export interface Upgrade {
    digest: number[];
    lock_id: _0x2.object_.ID;
  }

  export namespace Upgrade {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::upgrade_policies::Upgrade";

    const TYPE = new TypeDescriptor<Upgrade>(Upgrade.TYPE_QNAME);

    export function type(): TypeDescriptor<Upgrade> {
      return TYPE.apply();
    }
  }

  export interface UpgradeLock {
    id: _0x2.object_.UID;
    label: string;
    multisig_addr: string;
    upgrade_cap: _0x2.package_.UpgradeCap;
  }

  export namespace UpgradeLock {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::upgrade_policies::UpgradeLock";

    const TYPE = new TypeDescriptor<UpgradeLock>(UpgradeLock.TYPE_QNAME);

    export function type(): TypeDescriptor<UpgradeLock> {
      return TYPE.apply();
    }
  }

  export interface Witness {
    dummy_field: Boolean;
  }

  export namespace Witness {
    export const TYPE_QNAME =
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::upgrade_policies::Witness";

    const TYPE = new TypeDescriptor<Witness>(Witness.TYPE_QNAME);

    export function type(): TypeDescriptor<Witness> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function addRule<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::upgrade_policies::add_rule",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function borrowCap(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x2.transfer.Receiving<upgrade_policies.UpgradeLock>
          | TransactionArgument
        ),
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::upgrade_policies::borrow_cap",
        arguments: _args,
      });
    }
    export function confirmUpgrade(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.package_.UpgradeReceipt | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::upgrade_policies::confirm_upgrade",
        arguments: _args,
      });
    }
    export function destroyRestrict<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::upgrade_policies::destroy_restrict",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function destroyUpgrade<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::upgrade_policies::destroy_upgrade",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function executeRestrict(
      tx: TransactionBlock,
      args: [
        multisig.Executable | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        upgrade_policies.UpgradeLock | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::upgrade_policies::execute_restrict",
        arguments: _args,
      });
    }
    export function executeUpgrade(
      tx: TransactionBlock,
      args: [
        multisig.Executable | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::upgrade_policies::execute_upgrade",
        arguments: _args,
      });
    }
    export function lockCap(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        _0x2.package_.UpgradeCap | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::upgrade_policies::lock_cap",
        arguments: _args,
      });
    }
    export function lockCapWithTimelock(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        _0x2.package_.UpgradeCap | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::upgrade_policies::lock_cap_with_timelock",
        arguments: _args,
      });
    }
    export function newRestrict(
      tx: TransactionBlock,
      args: [
        number | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::upgrade_policies::new_restrict",
        arguments: _args,
      });
    }
    export function newUpgrade(
      tx: TransactionBlock,
      args: [
        (string | TransactionObjectArgument)[] | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::upgrade_policies::new_upgrade",
        arguments: _args,
      });
    }
    export function proposeRestrict(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        number | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::upgrade_policies::propose_restrict",
        arguments: _args,
      });
    }
    export function proposeUpgrade(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::upgrade_policies::propose_upgrade",
        arguments: _args,
      });
    }
    export function putBackCap(
      tx: TransactionBlock,
      args: [upgrade_policies.UpgradeLock | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::upgrade_policies::put_back_cap",
        arguments: _args,
      });
    }
    export function restrict<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        upgrade_policies.UpgradeLock | TransactionArgument,
        T0 | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::upgrade_policies::restrict",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function upgrade<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62::upgrade_policies::upgrade",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function addRule<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.addRule(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function borrowCap(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x2.transfer.Receiving<upgrade_policies.UpgradeLock>
          | TransactionArgument
        ),
      ],
    ): Promise<TypedDevInspectResults<[upgrade_policies.UpgradeLock]>> {
      const tx = new TransactionBlock();
      builder.borrowCap(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [upgrade_policies.UpgradeLock]
      >(inspectRes);
    }
    export async function confirmUpgrade(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.package_.UpgradeReceipt | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.confirmUpgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function destroyRestrict<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[number, _0x2.object_.ID]>> {
      const tx = new TransactionBlock();
      builder.destroyRestrict(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [number, _0x2.object_.ID]
      >(inspectRes);
    }
    export async function destroyUpgrade<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[number[], _0x2.object_.ID]>> {
      const tx = new TransactionBlock();
      builder.destroyUpgrade(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [number[], _0x2.object_.ID]
      >(inspectRes);
    }
    export async function executeRestrict(
      client: SuiClient,
      args: [
        multisig.Executable | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        upgrade_policies.UpgradeLock | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.executeRestrict(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function executeUpgrade(
      client: SuiClient,
      args: [
        multisig.Executable | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[_0x2.package_.UpgradeTicket]>> {
      const tx = new TransactionBlock();
      builder.executeUpgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.package_.UpgradeTicket]
      >(inspectRes);
    }
    export async function lockCap(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        _0x2.package_.UpgradeCap | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[upgrade_policies.UpgradeLock]>> {
      const tx = new TransactionBlock();
      builder.lockCap(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [upgrade_policies.UpgradeLock]
      >(inspectRes);
    }
    export async function lockCapWithTimelock(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        _0x2.package_.UpgradeCap | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.lockCapWithTimelock(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function newRestrict(
      client: SuiClient,
      args: [
        number | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[upgrade_policies.Restrict]>> {
      const tx = new TransactionBlock();
      builder.newRestrict(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [upgrade_policies.Restrict]
      >(inspectRes);
    }
    export async function newUpgrade(
      client: SuiClient,
      args: [
        (string | TransactionObjectArgument)[] | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[upgrade_policies.Upgrade]>> {
      const tx = new TransactionBlock();
      builder.newUpgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [upgrade_policies.Upgrade]
      >(inspectRes);
    }
    export async function proposeRestrict(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        number | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.proposeRestrict(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function proposeUpgrade(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.proposeUpgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function putBackCap(
      client: SuiClient,
      args: [upgrade_policies.UpgradeLock | TransactionArgument],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.putBackCap(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function restrict<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        upgrade_policies.UpgradeLock | TransactionArgument,
        T0 | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.restrict(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function upgrade<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x2.package_.UpgradeTicket]>> {
      const tx = new TransactionBlock();
      builder.upgrade(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.package_.UpgradeTicket]
      >(inspectRes);
    }
  }
}

const MODULES = JSON.parse(
  '{"account":{"fileFormatVersion":6,"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","name":"account","friends":[],"structs":{"Account":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"username","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"profile_picture","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"multisig_ids","type":{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]}}}]},"Invite":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"multisig_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]}},"exposedFunctions":{"accept_invite":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"account","name":"Account","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"account","name":"Invite","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"destroy":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"account","name":"Account","typeArguments":[]}}],"return":[]},"join_multisig":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"account","name":"Account","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"leave_multisig":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"account","name":"Account","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"multisig_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"account","name":"Invite","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"multisig_ids":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"account","name":"Account","typeArguments":[]}}}],"return":[{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"profile_picture":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"account","name":"Account","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"refuse_invite":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"account","name":"Invite","typeArguments":[]}}],"return":[]},"send_invite":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"username":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"account","name":"Account","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}}},"coin_operations":{"fileFormatVersion":6,"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","name":"coin_operations","friends":[],"structs":{},"exposedFunctions":{"merge":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]}},{"Vector":{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"split":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]}},{"Vector":"U64"},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]}}},"config":{"fileFormatVersion":6,"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","name":"config","friends":[],"structs":{"Migrate":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"version","type":"U64"}]},"Modify":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"name","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}}},{"name":"threshold","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}}},{"name":"to_remove","type":{"Vector":"Address"}},{"name":"to_add","type":{"Vector":"Address"}},{"name":"weights","type":{"Vector":"U64"}}]},"Witness":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{"destroy_migrate":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"TypeParameter":0}],"return":["U64"]},"destroy_modify":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}},{"Vector":"Address"},{"Vector":"Address"},{"Vector":"U64"}]},"execute_migrate":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}}],"return":[]},"execute_modify":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}}],"return":[]},"migrate":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"TypeParameter":0},"U64"],"return":[]},"modify":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"TypeParameter":0},"U64"],"return":[]},"new_migrate":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"config","name":"Migrate","typeArguments":[]}}]},"new_modify":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}},{"Vector":"Address"},{"Vector":"Address"},{"Vector":"U64"}],"return":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"config","name":"Modify","typeArguments":[]}}]},"propose_migrate":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64","U64",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"propose_modify":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64","U64",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}},{"Vector":"Address"},{"Vector":"Address"},{"Vector":"U64"},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}},"kiosk":{"fileFormatVersion":6,"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","name":"kiosk","friends":[],"structs":{"KioskOwnerLock":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"kiosk_owner_cap","type":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}}]},"List":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"nft_ids","type":{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}},{"name":"prices","type":{"Vector":"U64"}}]},"Take":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"nft_ids","type":{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}},{"name":"recipient","type":"Address"}]},"Witness":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{"borrow_cap":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"kiosk","name":"KioskOwnerLock","typeArguments":[]}}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"kiosk","name":"KioskOwnerLock","typeArguments":[]}}]},"complete_list":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}],"return":[]},"complete_take":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}],"return":[]},"delist":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"kiosk","name":"KioskOwnerLock","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"destroy_list":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}}],"return":[{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"Vector":"U64"}]},"destroy_take":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}}],"return":[{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},"Address"]},"execute_list":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"kiosk","name":"KioskOwnerLock","typeArguments":[]}}}],"return":[]},"execute_take":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"kiosk","name":"KioskOwnerLock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicy","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"list":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"kiosk","name":"KioskOwnerLock","typeArguments":[]}}},"U64"],"return":[]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"new_list":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"Vector":"U64"}],"return":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"kiosk","name":"List","typeArguments":[]}}]},"new_take":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},"Address"],"return":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"kiosk","name":"Take","typeArguments":[]}}]},"place":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"kiosk","name":"KioskOwnerLock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicy","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"propose_list":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64","U64",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"Vector":"U64"},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"propose_take":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64","U64",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"put_back_cap":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"kiosk","name":"KioskOwnerLock","typeArguments":[]}}],"return":[]},"take":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"kiosk","name":"KioskOwnerLock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicy","typeArguments":[{"TypeParameter":0}]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"withdraw_profits":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"kiosk","name":"KioskOwnerLock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}},"multisig":{"fileFormatVersion":6,"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","name":"multisig","friends":[{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","name":"account"},{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","name":"coin_operations"},{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","name":"config"},{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","name":"kiosk"},{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","name":"owned"},{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","name":"upgrade_policies"}],"structs":{"Executable":{"abilities":{"abilities":[]},"typeParameters":[],"fields":[{"name":"multisig_addr","type":"Address"},{"name":"module_witness","type":{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}},{"name":"actions","type":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}}]},"Member":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"weight","type":"U64"},{"name":"account_id","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]}}}]},"Multisig":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"version","type":"U64"},{"name":"name","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"threshold","type":"U64"},{"name":"total_weight","type":"U64"},{"name":"members","type":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["Address",{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Member","typeArguments":[]}}]}}},{"name":"proposals","type":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Proposal","typeArguments":[]}}]}}}]},"Proposal":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"module_witness","type":{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}},{"name":"description","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"expiration_epoch","type":"U64"},{"name":"execution_time","type":"U64"},{"name":"actions","type":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}},{"name":"approval_weight","type":"U64"},{"name":"approved","type":{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":["Address"]}}}]}},"exposedFunctions":{"action_mut":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"TypeParameter":0},"U64"],"return":[{"MutableReference":{"TypeParameter":1}}]},"add_members":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Vector":"Address"},{"Vector":"U64"}],"return":[]},"addr":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}}],"return":["Address"]},"approve_proposal":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"approved":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Proposal","typeArguments":[]}}}],"return":[{"Vector":"Address"}]},"assert_is_member":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"assert_multisig_executed":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}}],"return":[]},"assert_version":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}}],"return":[]},"create_proposal":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"TypeParameter":0},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64","U64",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Proposal","typeArguments":[]}}}]},"delete_proposal":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}]},"description":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Proposal","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"destroy_executable":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}},{"TypeParameter":0}],"return":[]},"executable_last_action_idx":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}}],"return":["U64"]},"executable_multisig_addr":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}}],"return":["Address"]},"execute_proposal":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}]},"execution_time":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Proposal","typeArguments":[]}}}],"return":["U64"]},"expiration_epoch":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Proposal","typeArguments":[]}}}],"return":["U64"]},"is_member":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},"Address"],"return":["Bool"]},"member_account_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},"Address"],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]}}]},"member_addresses":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}}],"return":[{"Vector":"Address"}]},"member_weight":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},"Address"],"return":["U64"]},"name":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}]},"num_of_proposals":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}}],"return":["U64"]},"pop_action":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"TypeParameter":1}]},"proposal":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Proposal","typeArguments":[]}}}]},"push_action":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Proposal","typeArguments":[]}}},{"TypeParameter":0}],"return":[]},"register_account_id":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"remove_approval":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"remove_members":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Vector":"Address"}],"return":[]},"set_name":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}],"return":[]},"set_threshold":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},"U64"],"return":[]},"set_version":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},"U64"],"return":[]},"share":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}],"return":[]},"threshold":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}}],"return":["U64"]},"total_weight":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}}],"return":["U64"]},"uid_mut":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}}],"return":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]},"unregister_account_id":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]}}},"owned":{"fileFormatVersion":6,"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","name":"owned","friends":[],"structs":{"Borrow":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"to_return","type":{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}}]},"Withdraw":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"objects","type":{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}}]}},"exposedFunctions":{"borrow":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]},{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"TypeParameter":0},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"TypeParameter":1}]}},"U64"],"return":[{"TypeParameter":1}]},"destroy_borrow":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"TypeParameter":0}],"return":[]},"destroy_withdraw":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"TypeParameter":0}],"return":[]},"new_borrow":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"owned","name":"Borrow","typeArguments":[]}}]},"new_withdraw":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"owned","name":"Withdraw","typeArguments":[]}}]},"put_back":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]},{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"TypeParameter":0},{"TypeParameter":1},"U64"],"return":[]},"withdraw":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]},{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"TypeParameter":0},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"TypeParameter":1}]}},"U64"],"return":[{"TypeParameter":1}]}}},"payments":{"fileFormatVersion":6,"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","name":"payments","friends":[],"structs":{"Pay":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"amount","type":"U64"},{"name":"interval","type":"U64"},{"name":"recipient","type":"Address"}]},"Stream":{"abilities":{"abilities":["Key"]},"typeParameters":[{"constraints":{"abilities":["Drop"]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"balance","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}},{"name":"amount","type":"U64"},{"name":"interval","type":"U64"},{"name":"last_epoch","type":"U64"},{"name":"recipient","type":"Address"}]},"Witness":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{"cancel_payment_stream":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"payments","name":"Stream","typeArguments":[{"TypeParameter":0}]}},{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"destroy_empty_stream":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"payments","name":"Stream","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"destroy_pay":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"TypeParameter":0}],"return":["U64","U64","Address"]},"disburse":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"payments","name":"Stream","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"execute_pay":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"new_pay":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64","Address"],"return":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"payments","name":"Pay","typeArguments":[]}}]},"pay":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]},{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}]}},{"TypeParameter":0},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"propose_pay":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64","U64",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},"U64","U64","Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}},"transfers":{"fileFormatVersion":6,"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","name":"transfers","friends":[],"structs":{"Deliver":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"recipient","type":"Address"}]},"Delivery":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"multisig_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"objects","type":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}}]},"DeliveryCap":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"delivery_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"Send":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"transfers","type":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},"Address"]}}}]},"Witness":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{"cancel_delivery":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"transfers","name":"Delivery","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"claim":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"transfers","name":"Delivery","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"transfers","name":"DeliveryCap","typeArguments":[]}}}],"return":[{"TypeParameter":0}]},"complete_deliver":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"transfers","name":"Delivery","typeArguments":[]}},{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"transfers","name":"DeliveryCap","typeArguments":[]}},{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}],"return":[]},"complete_send":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}],"return":[]},"confirm_delivery":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"transfers","name":"Delivery","typeArguments":[]}},{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"transfers","name":"DeliveryCap","typeArguments":[]}}],"return":[]},"create_delivery":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"transfers","name":"Delivery","typeArguments":[]}},{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"transfers","name":"DeliveryCap","typeArguments":[]}}]},"deliver":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]},{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"transfers","name":"Delivery","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"transfers","name":"DeliveryCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"TypeParameter":0},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"TypeParameter":1}]}},"U64"],"return":[]},"destroy_deliver":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"TypeParameter":0}],"return":["Address"]},"destroy_send":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"TypeParameter":0}],"return":[]},"execute_deliver":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"transfers","name":"Delivery","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"transfers","name":"DeliveryCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"execute_send":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"new_deliver":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["Address"],"return":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"transfers","name":"Deliver","typeArguments":[]}}]},"new_send":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"Vector":"Address"}],"return":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"transfers","name":"Send","typeArguments":[]}}]},"propose_delivery":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64","U64",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"propose_send":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64","U64",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"Vector":"Address"},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"retrieve":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"transfers","name":"Delivery","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"send":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop"]},{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"TypeParameter":0},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"TypeParameter":1}]}},"U64"],"return":[]}}},"upgrade_policies":{"fileFormatVersion":6,"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","name":"upgrade_policies","friends":[],"structs":{"Restrict":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"policy","type":"U8"},{"name":"lock_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"TimeLock":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"delay_ms","type":"U64"}]},"Upgrade":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"digest","type":{"Vector":"U8"}},{"name":"lock_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"UpgradeLock":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"label","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"multisig_addr","type":"Address"},{"name":"upgrade_cap","type":{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}}}]},"Witness":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{"add_rule":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"upgrade_policies","name":"UpgradeLock","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"TypeParameter":0}],"return":[]},"borrow_cap":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"upgrade_policies","name":"UpgradeLock","typeArguments":[]}}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"upgrade_policies","name":"UpgradeLock","typeArguments":[]}}]},"confirm_upgrade":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"upgrade_policies","name":"UpgradeLock","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"package","name":"UpgradeReceipt","typeArguments":[]}}],"return":[]},"destroy_restrict":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"TypeParameter":0}],"return":["U8",{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"destroy_upgrade":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"TypeParameter":0}],"return":[{"Vector":"U8"},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"execute_restrict":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"upgrade_policies","name":"UpgradeLock","typeArguments":[]}}],"return":[]},"execute_upgrade":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"upgrade_policies","name":"UpgradeLock","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"package","name":"UpgradeTicket","typeArguments":[]}}]},"lock_cap":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"upgrade_policies","name":"UpgradeLock","typeArguments":[]}}]},"lock_cap_with_timelock":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64",{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"new_restrict":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U8",{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"upgrade_policies","name":"Restrict","typeArguments":[]}}]},"new_upgrade":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Vector":"U8"},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"upgrade_policies","name":"Upgrade","typeArguments":[]}}]},"propose_restrict":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64","U64",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U8",{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"upgrade_policies","name":"UpgradeLock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"propose_upgrade":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Vector":"U8"},{"Reference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"upgrade_policies","name":"UpgradeLock","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"put_back_cap":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"upgrade_policies","name":"UpgradeLock","typeArguments":[]}}],"return":[]},"restrict":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"upgrade_policies","name":"UpgradeLock","typeArguments":[]}},{"TypeParameter":0},"U64"],"return":[]},"upgrade":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"multisig","name":"Executable","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62","module":"upgrade_policies","name":"UpgradeLock","typeArguments":[]}}},{"TypeParameter":0},"U64"],"return":[{"Struct":{"address":"0x2","module":"package","name":"UpgradeTicket","typeArguments":[]}}]}}}}',
);

export function loadAllTypes(coder: MoveCoder) {
  _0x2.loadAllTypes(coder);
  _0x1.loadAllTypes(coder);
  for (const m of Object.values(MODULES)) {
    coder.load(
      m as any,
      "0x9f23590424d6ee60f3ee8d8785a07917a07149ac32311527d659e59bda120d62",
    );
  }
}

loadAllTypes(defaultMoveCoder());
