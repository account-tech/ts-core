/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

/* Generated types for 0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4, original address 0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4 */

import { TypeDescriptor, ANY_TYPE } from "@typemove/move";
import { MoveCoder, TypedEventInstance } from "@typemove/sui";

import { defaultMoveCoder } from "@typemove/sui";

import {
  ZERO_ADDRESS,
  TypedDevInspectResults,
  getMoveCoder,
} from "@typemove/sui";
import {
  TransactionBlock,
  TransactionArgument,
  TransactionObjectArgument,
} from "@mysten/sui.js/transactions";
import { SuiClient } from "@mysten/sui.js/client";
import {
  transactionArgumentOrObject,
  transactionArgumentOrPure,
  transactionArgumentOrVec,
} from "@typemove/sui";

import { _0x2 } from "@typemove/sui/builtin";
import { _0x1 } from "@typemove/sui/builtin";

export namespace account {
  export interface Account {
    id: _0x2.object_.UID;
    username: string;
    profile_picture: string;
    multisigs: _0x2.vec_set.VecSet<_0x2.object_.ID>;
  }

  export namespace Account {
    export const TYPE_QNAME =
      "0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::account::Account";

    const TYPE = new TypeDescriptor<Account>(Account.TYPE_QNAME);

    export function type(): TypeDescriptor<Account> {
      return TYPE.apply();
    }
  }

  export interface Invite {
    id: _0x2.object_.UID;
    multisig: _0x2.object_.ID;
  }

  export namespace Invite {
    export const TYPE_QNAME =
      "0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::account::Invite";

    const TYPE = new TypeDescriptor<Invite>(Invite.TYPE_QNAME);

    export function type(): TypeDescriptor<Invite> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function acceptInvite(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        account.Invite | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::account::accept_invite",
        arguments: _args,
      });
    }
    export function destroy(
      tx: TransactionBlock,
      args: [account.Account | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::account::destroy",
        arguments: _args,
      });
    }
    export function joinMultisig(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::account::join_multisig",
        arguments: _args,
      });
    }
    export function leaveMultisig(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::account::leave_multisig",
        arguments: _args,
      });
    }
    export function multisig(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::account::multisig",
        arguments: _args,
      });
    }
    export function multisigs(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::account::multisigs",
        arguments: _args,
      });
    }
    export function new_(
      tx: TransactionBlock,
      args: [string | TransactionArgument, string | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::account::new",
        arguments: _args,
      });
    }
    export function profilePicture(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::account::profile_picture",
        arguments: _args,
      });
    }
    export function refuseInvite(
      tx: TransactionBlock,
      args: [account.Invite | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::account::refuse_invite",
        arguments: _args,
      });
    }
    export function sendInvite(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::account::send_invite",
        arguments: _args,
      });
    }
    export function username(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::account::username",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function acceptInvite(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        account.Invite | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.acceptInvite(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function destroy(
      client: SuiClient,
      args: [account.Account | TransactionArgument],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.destroy(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function joinMultisig(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.joinMultisig(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function leaveMultisig(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.leaveMultisig(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function multisig(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[_0x2.object_.ID]>> {
      const tx = new TransactionBlock();
      builder.multisig(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.object_.ID]
      >(inspectRes);
    }
    export async function multisigs(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[_0x2.object_.ID[]]>> {
      const tx = new TransactionBlock();
      builder.multisigs(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.object_.ID[]]
      >(inspectRes);
    }
    export async function new_(
      client: SuiClient,
      args: [string | TransactionArgument, string | TransactionArgument],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function profilePicture(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.profilePicture(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function refuseInvite(
      client: SuiClient,
      args: [account.Invite | TransactionArgument],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.refuseInvite(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function sendInvite(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.sendInvite(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function username(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.username(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
  }
}

export namespace coin_operations {
  export namespace builder {
    export function mergeCoins<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<_0x2.coin.Coin<T0>> | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::coin_operations::merge_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function splitCoins<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<_0x2.coin.Coin<T0>> | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::coin_operations::split_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function mergeCoins<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<_0x2.coin.Coin<T0>> | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.mergeCoins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function splitCoins<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<_0x2.coin.Coin<T0>> | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x2.object_.ID[]]>> {
      const tx = new TransactionBlock();
      builder.splitCoins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.object_.ID[]]
      >(inspectRes);
    }
  }
}

export namespace config {
  export interface Modify {
    name: _0x1.option.Option<string>;
    threshold: _0x1.option.Option<bigint>;
    to_add: string[];
    to_remove: string[];
  }

  export namespace Modify {
    export const TYPE_QNAME =
      "0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::config::Modify";

    const TYPE = new TypeDescriptor<Modify>(Modify.TYPE_QNAME);

    export function type(): TypeDescriptor<Modify> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function executeModify(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::config::execute_modify",
        arguments: _args,
      });
    }
    export function proposeModify(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        _0x1.option.Option<string> | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrVec(args[7], tx));
      _args.push(transactionArgumentOrVec(args[8], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::config::propose_modify",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function executeModify(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.executeModify(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function proposeModify(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        _0x1.option.Option<string> | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.proposeModify(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace kiosk {
  export interface List {
    borrow: owned.Borrow;
    nfts: _0x2.object_.ID[];
    prices: bigint[];
  }

  export namespace List {
    export const TYPE_QNAME =
      "0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::kiosk::List";

    const TYPE = new TypeDescriptor<List>(List.TYPE_QNAME);

    export function type(): TypeDescriptor<List> {
      return TYPE.apply();
    }
  }

  export interface Transfer {
    borrow: owned.Borrow;
    nfts: _0x2.object_.ID[];
    recipient: string;
  }

  export namespace Transfer {
    export const TYPE_QNAME =
      "0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::kiosk::Transfer";

    const TYPE = new TypeDescriptor<Transfer>(Transfer.TYPE_QNAME);

    export function type(): TypeDescriptor<Transfer> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function borrowCapList(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<_0x2.kiosk.KioskOwnerCap> | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::kiosk::borrow_cap_list",
        arguments: _args,
      });
    }
    export function borrowCapTransfer(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<_0x2.kiosk.KioskOwnerCap> | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::kiosk::borrow_cap_transfer",
        arguments: _args,
      });
    }
    export function completeList(
      tx: TransactionBlock,
      args: [
        multisig.Action<kiosk.List> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.kiosk.KioskOwnerCap | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::kiosk::complete_list",
        arguments: _args,
      });
    }
    export function completeRequest<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer_policy.TransferRequest<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::kiosk::complete_request",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function completeTransferFrom<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer_policy.TransferRequest<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::kiosk::complete_transfer_from",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function completeTransferTo(
      tx: TransactionBlock,
      args: [
        multisig.Action<kiosk.Transfer> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.kiosk.KioskOwnerCap | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::kiosk::complete_transfer_to",
        arguments: _args,
      });
    }
    export function delist<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<_0x2.kiosk.KioskOwnerCap> | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::kiosk::delist",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function list<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::kiosk::list",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function new_(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::kiosk::new",
        arguments: _args,
      });
    }
    export function proposeList(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrVec(args[6], tx));
      _args.push(transactionArgumentOrVec(args[7], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::kiosk::propose_list",
        arguments: _args,
      });
    }
    export function proposeTransferTo(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrVec(args[6], tx));
      _args.push(transactionArgumentOrPure(args[7], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::kiosk::propose_transfer_to",
        arguments: _args,
      });
    }
    export function transferFrom<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<_0x2.kiosk.KioskOwnerCap> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::kiosk::transfer_from",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function transferTo<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::kiosk::transfer_to",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function withdrawProfits(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::kiosk::withdraw_profits",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function borrowCapList(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<_0x2.kiosk.KioskOwnerCap> | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[_0x2.kiosk.KioskOwnerCap]>> {
      const tx = new TransactionBlock();
      builder.borrowCapList(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.kiosk.KioskOwnerCap]
      >(inspectRes);
    }
    export async function borrowCapTransfer(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<_0x2.kiosk.KioskOwnerCap> | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[_0x2.kiosk.KioskOwnerCap]>> {
      const tx = new TransactionBlock();
      builder.borrowCapTransfer(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.kiosk.KioskOwnerCap]
      >(inspectRes);
    }
    export async function completeList(
      client: SuiClient,
      args: [
        multisig.Action<kiosk.List> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.kiosk.KioskOwnerCap | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.completeList(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function completeRequest<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer_policy.TransferRequest<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.completeRequest(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function completeTransferFrom<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer_policy.TransferRequest<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.completeTransferFrom(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function completeTransferTo(
      client: SuiClient,
      args: [
        multisig.Action<kiosk.Transfer> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.kiosk.KioskOwnerCap | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.completeTransferTo(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function delist<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<_0x2.kiosk.KioskOwnerCap> | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.delist(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function list<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.list(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function new_(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function proposeList(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.proposeList(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function proposeTransferTo(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.proposeTransferTo(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function transferFrom<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<_0x2.kiosk.KioskOwnerCap> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<[_0x2.transfer_policy.TransferRequest<T0>]>
    > {
      const tx = new TransactionBlock();
      builder.transferFrom(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.transfer_policy.TransferRequest<T0>]
      >(inspectRes);
    }
    export async function transferTo<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<[_0x2.transfer_policy.TransferRequest<T0>]>
    > {
      const tx = new TransactionBlock();
      builder.transferTo(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.transfer_policy.TransferRequest<T0>]
      >(inspectRes);
    }
    export async function withdrawProfits(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.withdrawProfits(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace move_call {
  export interface MoveCall {
    digest: number[];
    withdraw: owned.Withdraw;
    borrow: owned.Borrow;
  }

  export namespace MoveCall {
    export const TYPE_QNAME =
      "0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::move_call::MoveCall";

    const TYPE = new TypeDescriptor<MoveCall>(MoveCall.TYPE_QNAME);

    export function type(): TypeDescriptor<MoveCall> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function executeMoveCall(
      tx: TransactionBlock,
      args: [multisig.Action<move_call.MoveCall> | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::move_call::execute_move_call",
        arguments: _args,
      });
    }
    export function proposeMoveCall(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrVec(args[6], tx));
      _args.push(transactionArgumentOrVec(args[7], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::move_call::propose_move_call",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function executeMoveCall(
      client: SuiClient,
      args: [multisig.Action<move_call.MoveCall> | TransactionArgument],
    ): Promise<TypedDevInspectResults<[owned.Withdraw, owned.Borrow]>> {
      const tx = new TransactionBlock();
      builder.executeMoveCall(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [owned.Withdraw, owned.Borrow]
      >(inspectRes);
    }
    export async function proposeMoveCall(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.proposeMoveCall(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace multisig {
  export interface Action<T0> {
    inner: T0;
  }

  export namespace Action {
    export const TYPE_QNAME =
      "0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::Action";

    const TYPE = new TypeDescriptor<Action<any>>(Action.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<Action<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface ActionKey {
    dummy_field: Boolean;
  }

  export namespace ActionKey {
    export const TYPE_QNAME =
      "0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::ActionKey";

    const TYPE = new TypeDescriptor<ActionKey>(ActionKey.TYPE_QNAME);

    export function type(): TypeDescriptor<ActionKey> {
      return TYPE.apply();
    }
  }

  export interface ActionKeyInstance extends TypedEventInstance<ActionKey> {
    data_decoded: ActionKey;
    type_arguments: [];
  }

  export interface Multisig {
    id: _0x2.object_.UID;
    name: string;
    threshold: bigint;
    members: _0x2.vec_set.VecSet<string>;
    proposals: _0x2.vec_map.VecMap<string, multisig.Proposal>;
  }

  export namespace Multisig {
    export const TYPE_QNAME =
      "0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::Multisig";

    const TYPE = new TypeDescriptor<Multisig>(Multisig.TYPE_QNAME);

    export function type(): TypeDescriptor<Multisig> {
      return TYPE.apply();
    }
  }

  export interface Proposal {
    id: _0x2.object_.UID;
    description: string;
    expiration_epoch: bigint;
    execution_time: bigint;
    approved: _0x2.vec_set.VecSet<string>;
  }

  export namespace Proposal {
    export const TYPE_QNAME =
      "0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::Proposal";

    const TYPE = new TypeDescriptor<Proposal>(Proposal.TYPE_QNAME);

    export function type(): TypeDescriptor<Proposal> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function actionMut<T0 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::action_mut",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function addMembers(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::add_members",
        arguments: _args,
      });
    }
    export function addr(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::addr",
        arguments: _args,
      });
    }
    export function approveProposal(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::approve_proposal",
        arguments: _args,
      });
    }
    export function approved(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::approved",
        arguments: _args,
      });
    }
    export function assertIsMember(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::assert_is_member",
        arguments: _args,
      });
    }
    export function cleanProposals(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::clean_proposals",
        arguments: _args,
      });
    }
    export function createProposal<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::create_proposal",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function deleteProposal(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::delete_proposal",
        arguments: _args,
      });
    }
    export function description(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::description",
        arguments: _args,
      });
    }
    export function executeProposal<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::execute_proposal",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function executionTime(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::execution_time",
        arguments: _args,
      });
    }
    export function expirationEpoch(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::expiration_epoch",
        arguments: _args,
      });
    }
    export function members(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::members",
        arguments: _args,
      });
    }
    export function name(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::name",
        arguments: _args,
      });
    }
    export function new_(
      tx: TransactionBlock,
      args: [string | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::new",
        arguments: _args,
      });
    }
    export function numOfProposals(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::num_of_proposals",
        arguments: _args,
      });
    }
    export function proposal(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::proposal",
        arguments: _args,
      });
    }
    export function removeApproval(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::remove_approval",
        arguments: _args,
      });
    }
    export function removeMembers(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::remove_members",
        arguments: _args,
      });
    }
    export function setName(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::set_name",
        arguments: _args,
      });
    }
    export function setThreshold(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::set_threshold",
        arguments: _args,
      });
    }
    export function share(
      tx: TransactionBlock,
      args: [multisig.Multisig | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::share",
        arguments: _args,
      });
    }
    export function threshold(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::threshold",
        arguments: _args,
      });
    }
    export function uidMut(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::uid_mut",
        arguments: _args,
      });
    }
    export function unpackAction<T0 = any>(
      tx: TransactionBlock,
      args: [multisig.Action<T0> | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::multisig::unpack_action",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function actionMut<T0 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.actionMut(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function addMembers(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.addMembers(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function addr(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.addr(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function approveProposal(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.approveProposal(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function approved(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string[]]>> {
      const tx = new TransactionBlock();
      builder.approved(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string[]]>(
        inspectRes,
      );
    }
    export async function assertIsMember(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.assertIsMember(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function cleanProposals(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.cleanProposals(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function createProposal<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.createProposal(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function deleteProposal(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.deleteProposal(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function description(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.description(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function executeProposal<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[multisig.Action<T0>]>> {
      const tx = new TransactionBlock();
      builder.executeProposal(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [multisig.Action<T0>]
      >(inspectRes);
    }
    export async function executionTime(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.executionTime(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function expirationEpoch(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.expirationEpoch(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function members(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string[]]>> {
      const tx = new TransactionBlock();
      builder.members(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string[]]>(
        inspectRes,
      );
    }
    export async function name(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.name(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function new_(
      client: SuiClient,
      args: [string | TransactionArgument],
    ): Promise<TypedDevInspectResults<[multisig.Multisig]>> {
      const tx = new TransactionBlock();
      builder.new_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [multisig.Multisig]
      >(inspectRes);
    }
    export async function numOfProposals(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.numOfProposals(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function proposal(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.proposal(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function removeApproval(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.removeApproval(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function removeMembers(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.removeMembers(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function setName(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.setName(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function setThreshold(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.setThreshold(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function share(
      client: SuiClient,
      args: [multisig.Multisig | TransactionArgument],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.share(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function threshold(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new TransactionBlock();
      builder.threshold(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function uidMut(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new TransactionBlock();
      builder.uidMut(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function unpackAction<T0 = any>(
      client: SuiClient,
      args: [multisig.Action<T0> | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[T0]>> {
      const tx = new TransactionBlock();
      builder.unpackAction(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[T0]>(
        inspectRes,
      );
    }
  }
}

export namespace owned {
  export interface Borrow {
    withdraw: owned.Withdraw;
    to_return: _0x2.object_.ID[];
  }

  export namespace Borrow {
    export const TYPE_QNAME =
      "0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::owned::Borrow";

    const TYPE = new TypeDescriptor<Borrow>(Borrow.TYPE_QNAME);

    export function type(): TypeDescriptor<Borrow> {
      return TYPE.apply();
    }
  }

  export interface Withdraw {
    objects: _0x2.object_.ID[];
  }

  export namespace Withdraw {
    export const TYPE_QNAME =
      "0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::owned::Withdraw";

    const TYPE = new TypeDescriptor<Withdraw>(Withdraw.TYPE_QNAME);

    export function type(): TypeDescriptor<Withdraw> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function borrow<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::owned::borrow",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function completeBorrow(
      tx: TransactionBlock,
      args: [owned.Borrow | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::owned::complete_borrow",
        arguments: _args,
      });
    }
    export function completeWithdraw(
      tx: TransactionBlock,
      args: [owned.Withdraw | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::owned::complete_withdraw",
        arguments: _args,
      });
    }
    export function newBorrow(
      tx: TransactionBlock,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::owned::new_borrow",
        arguments: _args,
      });
    }
    export function newWithdraw(
      tx: TransactionBlock,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::owned::new_withdraw",
        arguments: _args,
      });
    }
    export function putBack<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::owned::put_back",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function withdraw<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::owned::withdraw",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function borrow<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[T0]>> {
      const tx = new TransactionBlock();
      builder.borrow(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[T0]>(
        inspectRes,
      );
    }
    export async function completeBorrow(
      client: SuiClient,
      args: [owned.Borrow | TransactionArgument],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.completeBorrow(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function completeWithdraw(
      client: SuiClient,
      args: [owned.Withdraw | TransactionArgument],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.completeWithdraw(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function newBorrow(
      client: SuiClient,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument],
    ): Promise<TypedDevInspectResults<[owned.Borrow]>> {
      const tx = new TransactionBlock();
      builder.newBorrow(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [owned.Borrow]
      >(inspectRes);
    }
    export async function newWithdraw(
      client: SuiClient,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument],
    ): Promise<TypedDevInspectResults<[owned.Withdraw]>> {
      const tx = new TransactionBlock();
      builder.newWithdraw(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [owned.Withdraw]
      >(inspectRes);
    }
    export async function putBack<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.putBack(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function withdraw<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[T0]>> {
      const tx = new TransactionBlock();
      builder.withdraw(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[T0]>(
        inspectRes,
      );
    }
  }
}

export namespace payments {
  export interface Pay {
    withdraw: owned.Withdraw;
    amount: bigint;
    interval: bigint;
    recipient: string;
  }

  export namespace Pay {
    export const TYPE_QNAME =
      "0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::payments::Pay";

    const TYPE = new TypeDescriptor<Pay>(Pay.TYPE_QNAME);

    export function type(): TypeDescriptor<Pay> {
      return TYPE.apply();
    }
  }

  export interface Stream<T0> {
    id: _0x2.object_.UID;
    balance: _0x2.balance.Balance<T0>;
    amount: bigint;
    interval: bigint;
    last_epoch: bigint;
    recipient: string;
  }

  export namespace Stream {
    export const TYPE_QNAME =
      "0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::payments::Stream";

    const TYPE = new TypeDescriptor<Stream<any>>(Stream.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<Stream<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export namespace builder {
    export function cancelPayment<T0 = any>(
      tx: TransactionBlock,
      args: [
        payments.Stream<T0> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::payments::cancel_payment",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function completeStream<T0 = any>(
      tx: TransactionBlock,
      args: [payments.Stream<T0> | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::payments::complete_stream",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function createStream<T0 = any>(
      tx: TransactionBlock,
      args: [
        multisig.Action<payments.Pay> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<_0x2.coin.Coin<T0>> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::payments::create_stream",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function pay<T0 = any>(
      tx: TransactionBlock,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::payments::pay",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function proposePay(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrPure(args[7], tx));
      _args.push(transactionArgumentOrPure(args[8], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::payments::propose_pay",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function cancelPayment<T0 = any>(
      client: SuiClient,
      args: [
        payments.Stream<T0> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.cancelPayment(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function completeStream<T0 = any>(
      client: SuiClient,
      args: [payments.Stream<T0> | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.completeStream(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function createStream<T0 = any>(
      client: SuiClient,
      args: [
        multisig.Action<payments.Pay> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<_0x2.coin.Coin<T0>> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.createStream(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function pay<T0 = any>(
      client: SuiClient,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.pay(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function proposePay(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        _0x2.object_.ID | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.proposePay(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace transfers {
  export interface Deliver {
    withdraw: owned.Withdraw;
    recipient: string;
  }

  export namespace Deliver {
    export const TYPE_QNAME =
      "0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::transfers::Deliver";

    const TYPE = new TypeDescriptor<Deliver>(Deliver.TYPE_QNAME);

    export function type(): TypeDescriptor<Deliver> {
      return TYPE.apply();
    }
  }

  export interface Delivery {
    id: _0x2.object_.UID;
    objects: _0x2.bag.Bag;
  }

  export namespace Delivery {
    export const TYPE_QNAME =
      "0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::transfers::Delivery";

    const TYPE = new TypeDescriptor<Delivery>(Delivery.TYPE_QNAME);

    export function type(): TypeDescriptor<Delivery> {
      return TYPE.apply();
    }
  }

  export interface DeliveryCap {
    id: _0x2.object_.UID;
    delivery_id: _0x2.object_.ID;
  }

  export namespace DeliveryCap {
    export const TYPE_QNAME =
      "0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::transfers::DeliveryCap";

    const TYPE = new TypeDescriptor<DeliveryCap>(DeliveryCap.TYPE_QNAME);

    export function type(): TypeDescriptor<DeliveryCap> {
      return TYPE.apply();
    }
  }

  export interface Send {
    withdraw: owned.Withdraw;
    recipients: string[];
  }

  export namespace Send {
    export const TYPE_QNAME =
      "0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::transfers::Send";

    const TYPE = new TypeDescriptor<Send>(Send.TYPE_QNAME);

    export function type(): TypeDescriptor<Send> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function addToDelivery<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::transfers::add_to_delivery",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function cancelDelivery(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        transfers.Delivery | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::transfers::cancel_delivery",
        arguments: _args,
      });
    }
    export function claim<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::transfers::claim",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function completeDelivery(
      tx: TransactionBlock,
      args: [
        transfers.Delivery | TransactionArgument,
        transfers.DeliveryCap | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::transfers::complete_delivery",
        arguments: _args,
      });
    }
    export function completeSend(
      tx: TransactionBlock,
      args: [multisig.Action<transfers.Send> | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::transfers::complete_send",
        arguments: _args,
      });
    }
    export function createDelivery(
      tx: TransactionBlock,
      args: [],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::transfers::create_delivery",
        arguments: _args,
      });
    }
    export function deliver(
      tx: TransactionBlock,
      args: [
        transfers.Delivery | TransactionArgument,
        multisig.Action<transfers.Deliver> | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::transfers::deliver",
        arguments: _args,
      });
    }
    export function proposeDelivery(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::transfers::propose_delivery",
        arguments: _args,
      });
    }
    export function proposeSend(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrVec(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::transfers::propose_send",
        arguments: _args,
      });
    }
    export function retrieve<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::transfers::retrieve",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function send<T0 = any>(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::transfers::send",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function addToDelivery<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.addToDelivery(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function cancelDelivery(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        transfers.Delivery | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.cancelDelivery(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function claim<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[T0]>> {
      const tx = new TransactionBlock();
      builder.claim(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[T0]>(
        inspectRes,
      );
    }
    export async function completeDelivery(
      client: SuiClient,
      args: [
        transfers.Delivery | TransactionArgument,
        transfers.DeliveryCap | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.completeDelivery(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function completeSend(
      client: SuiClient,
      args: [multisig.Action<transfers.Send> | TransactionArgument],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.completeSend(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function createDelivery(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[transfers.Delivery]>> {
      const tx = new TransactionBlock();
      builder.createDelivery(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [transfers.Delivery]
      >(inspectRes);
    }
    export async function deliver(
      client: SuiClient,
      args: [
        transfers.Delivery | TransactionArgument,
        multisig.Action<transfers.Deliver> | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.deliver(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function proposeDelivery(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.proposeDelivery(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function proposeSend(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.proposeSend(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function retrieve<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.retrieve(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function send<T0 = any>(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.transfer.Receiving<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.send(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace upgrade_policies {
  export interface Policy {
    policy: number;
    upgrade_lock: _0x2.object_.ID;
  }

  export namespace Policy {
    export const TYPE_QNAME =
      "0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::upgrade_policies::Policy";

    const TYPE = new TypeDescriptor<Policy>(Policy.TYPE_QNAME);

    export function type(): TypeDescriptor<Policy> {
      return TYPE.apply();
    }
  }

  export interface Upgrade {
    digest: number[];
    upgrade_lock: _0x2.object_.ID;
  }

  export namespace Upgrade {
    export const TYPE_QNAME =
      "0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::upgrade_policies::Upgrade";

    const TYPE = new TypeDescriptor<Upgrade>(Upgrade.TYPE_QNAME);

    export function type(): TypeDescriptor<Upgrade> {
      return TYPE.apply();
    }
  }

  export interface UpgradeLock {
    id: _0x2.object_.UID;
    label: string;
    time_lock: bigint;
    upgrade_cap: _0x2.package_.UpgradeCap;
  }

  export namespace UpgradeLock {
    export const TYPE_QNAME =
      "0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::upgrade_policies::UpgradeLock";

    const TYPE = new TypeDescriptor<UpgradeLock>(UpgradeLock.TYPE_QNAME);

    export function type(): TypeDescriptor<UpgradeLock> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function completeUpgrade(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x2.transfer.Receiving<upgrade_policies.UpgradeLock>
          | TransactionArgument
        ),
        _0x2.package_.UpgradeReceipt | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::upgrade_policies::complete_upgrade",
        arguments: _args,
      });
    }
    export function executePolicy(
      tx: TransactionBlock,
      args: [
        multisig.Action<upgrade_policies.Policy> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x2.transfer.Receiving<upgrade_policies.UpgradeLock>
          | TransactionArgument
        ),
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::upgrade_policies::execute_policy",
        arguments: _args,
      });
    }
    export function executeUpgrade(
      tx: TransactionBlock,
      args: [
        multisig.Action<upgrade_policies.Upgrade> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x2.transfer.Receiving<upgrade_policies.UpgradeLock>
          | TransactionArgument
        ),
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::upgrade_policies::execute_upgrade",
        arguments: _args,
      });
    }
    export function lockCap(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        _0x2.package_.UpgradeCap | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::upgrade_policies::lock_cap",
        arguments: _args,
      });
    }
    export function proposePolicy(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        number | TransactionArgument,
        (
          | _0x2.transfer.Receiving<upgrade_policies.UpgradeLock>
          | TransactionArgument
        ),
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::upgrade_policies::propose_policy",
        arguments: _args,
      });
    }
    export function proposeUpgrade(
      tx: TransactionBlock,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (
          | _0x2.transfer.Receiving<upgrade_policies.UpgradeLock>
          | TransactionArgument
        ),
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x06b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4::upgrade_policies::propose_upgrade",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function completeUpgrade(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x2.transfer.Receiving<upgrade_policies.UpgradeLock>
          | TransactionArgument
        ),
        _0x2.package_.UpgradeReceipt | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.completeUpgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function executePolicy(
      client: SuiClient,
      args: [
        multisig.Action<upgrade_policies.Policy> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x2.transfer.Receiving<upgrade_policies.UpgradeLock>
          | TransactionArgument
        ),
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.executePolicy(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function executeUpgrade(
      client: SuiClient,
      args: [
        multisig.Action<upgrade_policies.Upgrade> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x2.transfer.Receiving<upgrade_policies.UpgradeLock>
          | TransactionArgument
        ),
      ],
    ): Promise<TypedDevInspectResults<[_0x2.package_.UpgradeTicket]>> {
      const tx = new TransactionBlock();
      builder.executeUpgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.package_.UpgradeTicket]
      >(inspectRes);
    }
    export async function lockCap(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        _0x2.package_.UpgradeCap | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.lockCap(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function proposePolicy(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        number | TransactionArgument,
        (
          | _0x2.transfer.Receiving<upgrade_policies.UpgradeLock>
          | TransactionArgument
        ),
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.proposePolicy(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function proposeUpgrade(
      client: SuiClient,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (
          | _0x2.transfer.Receiving<upgrade_policies.UpgradeLock>
          | TransactionArgument
        ),
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new TransactionBlock();
      builder.proposeUpgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

const MODULES = JSON.parse(
  '{"account":{"fileFormatVersion":6,"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","name":"account","friends":[],"structs":{"Account":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"username","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"profile_picture","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"multisigs","type":{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]}}}]},"Invite":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"multisig","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]}},"exposedFunctions":{"accept_invite":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"account","name":"Account","typeArguments":[]}}},{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"account","name":"Invite","typeArguments":[]}}],"return":[]},"destroy":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"account","name":"Account","typeArguments":[]}}],"return":[]},"join_multisig":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"account","name":"Account","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[]},"leave_multisig":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"account","name":"Account","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[]},"multisig":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"account","name":"Invite","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"multisigs":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"account","name":"Account","typeArguments":[]}}}],"return":[{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"profile_picture":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"account","name":"Account","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"refuse_invite":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"account","name":"Invite","typeArguments":[]}}],"return":[]},"send_invite":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"username":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"account","name":"Account","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}}},"coin_operations":{"fileFormatVersion":6,"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","name":"coin_operations","friends":[],"structs":{},"exposedFunctions":{"merge_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]}},{"Vector":{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"split_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]}},{"Vector":"U64"},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]}}},"config":{"fileFormatVersion":6,"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","name":"config","friends":[],"structs":{"Modify":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"name","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}}},{"name":"threshold","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}}},{"name":"to_add","type":{"Vector":"Address"}},{"name":"to_remove","type":{"Vector":"Address"}}]}},"exposedFunctions":{"execute_modify":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"propose_modify":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64","U64",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}},{"Vector":"Address"},{"Vector":"Address"},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}},"kiosk":{"fileFormatVersion":6,"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","name":"kiosk","friends":[],"structs":{"List":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"borrow","type":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"owned","name":"Borrow","typeArguments":[]}}},{"name":"nfts","type":{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}},{"name":"prices","type":{"Vector":"U64"}}]},"Transfer":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"borrow","type":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"owned","name":"Borrow","typeArguments":[]}}},{"name":"nfts","type":{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}},{"name":"recipient","type":"Address"}]}},"exposedFunctions":{"borrow_cap_list":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Action","typeArguments":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"kiosk","name":"List","typeArguments":[]}}]}}},{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}]}}],"return":[{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}]},"borrow_cap_transfer":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Action","typeArguments":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"kiosk","name":"Transfer","typeArguments":[]}}]}}},{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}]}}],"return":[{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}]},"complete_list":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Action","typeArguments":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"kiosk","name":"List","typeArguments":[]}}]}},{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}],"return":[]},"complete_request":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicy","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferRequest","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"complete_transfer_from":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferPolicy","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferRequest","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"complete_transfer_to":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Action","typeArguments":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"kiosk","name":"Transfer","typeArguments":[]}}]}},{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}],"return":[]},"delist":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}]}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"list":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Action","typeArguments":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"kiosk","name":"List","typeArguments":[]}}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}}],"return":[]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"propose_list":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64","U64",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"Vector":"U64"},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"propose_transfer_to":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64","U64",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"transfer_from":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferRequest","typeArguments":[{"TypeParameter":0}]}}]},"transfer_to":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Action","typeArguments":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"kiosk","name":"Transfer","typeArguments":[]}}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"transfer_policy","name":"TransferRequest","typeArguments":[{"TypeParameter":0}]}}]},"withdraw_profits":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"kiosk","name":"Kiosk","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"kiosk","name":"KioskOwnerCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}},"move_call":{"fileFormatVersion":6,"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","name":"move_call","friends":[],"structs":{"MoveCall":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"digest","type":{"Vector":"U8"}},{"name":"withdraw","type":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"owned","name":"Withdraw","typeArguments":[]}}},{"name":"borrow","type":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"owned","name":"Borrow","typeArguments":[]}}}]}},"exposedFunctions":{"execute_move_call":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Action","typeArguments":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"move_call","name":"MoveCall","typeArguments":[]}}]}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"owned","name":"Withdraw","typeArguments":[]}},{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"owned","name":"Borrow","typeArguments":[]}}]},"propose_move_call":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64","U64",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Vector":"U8"},{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}},"multisig":{"fileFormatVersion":6,"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","name":"multisig","friends":[{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","name":"account"},{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","name":"coin_operations"},{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","name":"config"},{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","name":"kiosk"},{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","name":"move_call"},{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","name":"owned"},{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","name":"payments"},{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","name":"transfers"},{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","name":"upgrade_policies"}],"structs":{"Action":{"abilities":{"abilities":[]},"typeParameters":[{"constraints":{"abilities":["Store"]},"isPhantom":false}],"fields":[{"name":"inner","type":{"TypeParameter":0}}]},"ActionKey":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"Multisig":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"name","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"threshold","type":"U64"},{"name":"members","type":{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":["Address"]}}},{"name":"proposals","type":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Proposal","typeArguments":[]}}]}}}]},"Proposal":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"description","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"expiration_epoch","type":"U64"},{"name":"execution_time","type":"U64"},{"name":"approved","type":{"Struct":{"address":"0x2","module":"vec_set","name":"VecSet","typeArguments":["Address"]}}}]}},"exposedFunctions":{"action_mut":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Action","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"MutableReference":{"TypeParameter":0}}]},"add_members":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Vector":"Address"}],"return":[]},"addr":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}}],"return":["Address"]},"approve_proposal":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"approved":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Proposal","typeArguments":[]}}}],"return":[{"Vector":"Address"}]},"assert_is_member":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"clean_proposals":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"create_proposal":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"TypeParameter":0},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64","U64",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"delete_proposal":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"description":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Proposal","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"execute_proposal":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Action","typeArguments":[{"TypeParameter":0}]}}]},"execution_time":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Proposal","typeArguments":[]}}}],"return":["U64"]},"expiration_epoch":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Proposal","typeArguments":[]}}}],"return":["U64"]},"members":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}}],"return":[{"Vector":"Address"}]},"name":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}]},"num_of_proposals":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}}],"return":["U64"]},"proposal":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Proposal","typeArguments":[]}}}]},"remove_approval":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"remove_members":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Vector":"Address"}],"return":[]},"set_name":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}],"return":[]},"set_threshold":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},"U64"],"return":[]},"share":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}],"return":[]},"threshold":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}}],"return":["U64"]},"uid_mut":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}}],"return":[{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]},"unpack_action":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Action","typeArguments":[{"TypeParameter":0}]}}],"return":[{"TypeParameter":0}]}}},"owned":{"fileFormatVersion":6,"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","name":"owned","friends":[{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","name":"kiosk"},{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","name":"move_call"},{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","name":"payments"},{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","name":"transfers"}],"structs":{"Borrow":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"withdraw","type":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"owned","name":"Withdraw","typeArguments":[]}}},{"name":"to_return","type":{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}}]},"Withdraw":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"objects","type":{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}}]}},"exposedFunctions":{"borrow":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"owned","name":"Borrow","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"TypeParameter":0}]}}],"return":[{"TypeParameter":0}]},"complete_borrow":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"owned","name":"Borrow","typeArguments":[]}}],"return":[]},"complete_withdraw":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"owned","name":"Withdraw","typeArguments":[]}}],"return":[]},"new_borrow":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"owned","name":"Borrow","typeArguments":[]}}]},"new_withdraw":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"owned","name":"Withdraw","typeArguments":[]}}]},"put_back":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"owned","name":"Borrow","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"TypeParameter":0}],"return":[]},"withdraw":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"owned","name":"Withdraw","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"TypeParameter":0}]}}],"return":[{"TypeParameter":0}]}}},"payments":{"fileFormatVersion":6,"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","name":"payments","friends":[],"structs":{"Pay":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"withdraw","type":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"owned","name":"Withdraw","typeArguments":[]}}},{"name":"amount","type":"U64"},{"name":"interval","type":"U64"},{"name":"recipient","type":"Address"}]},"Stream":{"abilities":{"abilities":["Key"]},"typeParameters":[{"constraints":{"abilities":["Drop"]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"balance","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}},{"name":"amount","type":"U64"},{"name":"interval","type":"U64"},{"name":"last_epoch","type":"U64"},{"name":"recipient","type":"Address"}]}},"exposedFunctions":{"cancel_payment":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"payments","name":"Stream","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"complete_stream":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"payments","name":"Stream","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"create_stream":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Action","typeArguments":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"payments","name":"Pay","typeArguments":[]}}]}},{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"pay":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"payments","name":"Stream","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"propose_pay":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64","U64",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},"U64","U64","Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}},"transfers":{"fileFormatVersion":6,"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","name":"transfers","friends":[],"structs":{"Deliver":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"withdraw","type":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"owned","name":"Withdraw","typeArguments":[]}}},{"name":"recipient","type":"Address"}]},"Delivery":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"objects","type":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}}]},"DeliveryCap":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"delivery_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"Send":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"withdraw","type":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"owned","name":"Withdraw","typeArguments":[]}}},{"name":"recipients","type":{"Vector":"Address"}}]}},"exposedFunctions":{"add_to_delivery":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"transfers","name":"Delivery","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Action","typeArguments":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"transfers","name":"Deliver","typeArguments":[]}}]}}},{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"cancel_delivery":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"transfers","name":"Delivery","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"claim":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"transfers","name":"Delivery","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"transfers","name":"DeliveryCap","typeArguments":[]}}}],"return":[{"TypeParameter":0}]},"complete_delivery":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"transfers","name":"Delivery","typeArguments":[]}},{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"transfers","name":"DeliveryCap","typeArguments":[]}}],"return":[]},"complete_send":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Action","typeArguments":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"transfers","name":"Send","typeArguments":[]}}]}}],"return":[]},"create_delivery":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"transfers","name":"Delivery","typeArguments":[]}}]},"deliver":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"transfers","name":"Delivery","typeArguments":[]}},{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Action","typeArguments":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"transfers","name":"Deliver","typeArguments":[]}}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"propose_delivery":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64","U64",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"propose_send":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64","U64",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"Vector":"Address"},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"retrieve":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"transfers","name":"Delivery","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"send":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store","Key"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Action","typeArguments":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"transfers","name":"Send","typeArguments":[]}}]}}},{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"TypeParameter":0}]}}],"return":[]}}},"upgrade_policies":{"fileFormatVersion":6,"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","name":"upgrade_policies","friends":[],"structs":{"Policy":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"policy","type":"U8"},{"name":"upgrade_lock","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"Upgrade":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"digest","type":{"Vector":"U8"}},{"name":"upgrade_lock","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"UpgradeLock":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"label","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"time_lock","type":"U64"},{"name":"upgrade_cap","type":{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}}}]}},"exposedFunctions":{"complete_upgrade":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"upgrade_policies","name":"UpgradeLock","typeArguments":[]}}]}},{"Struct":{"address":"0x2","module":"package","name":"UpgradeReceipt","typeArguments":[]}}],"return":[]},"execute_policy":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Action","typeArguments":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"upgrade_policies","name":"Policy","typeArguments":[]}}]}},{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"upgrade_policies","name":"UpgradeLock","typeArguments":[]}}]}}],"return":[]},"execute_upgrade":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Action","typeArguments":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"upgrade_policies","name":"Upgrade","typeArguments":[]}}]}},{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"upgrade_policies","name":"UpgradeLock","typeArguments":[]}}]}}],"return":[{"Struct":{"address":"0x2","module":"package","name":"UpgradeTicket","typeArguments":[]}}]},"lock_cap":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64",{"Struct":{"address":"0x2","module":"package","name":"UpgradeCap","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"propose_policy":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64","U64",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U8",{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"upgrade_policies","name":"UpgradeLock","typeArguments":[]}}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"propose_upgrade":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"multisig","name":"Multisig","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Vector":"U8"},{"Struct":{"address":"0x2","module":"transfer","name":"Receiving","typeArguments":[{"Struct":{"address":"0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4","module":"upgrade_policies","name":"UpgradeLock","typeArguments":[]}}]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}}}',
);

export function loadAllTypes(coder: MoveCoder) {
  _0x2.loadAllTypes(coder);
  _0x1.loadAllTypes(coder);
  for (const m of Object.values(MODULES)) {
    coder.load(
      m as any,
      "0x6b1b13873c2a5eea9e440af1c2478a90adf6b15c95c33381d3ebb350a1e60f4",
    );
  }
}

loadAllTypes(defaultMoveCoder());
