import * as config from "./config/structs";
import * as currency from "./currency/structs";
import * as kiosk from "./kiosk/structs";
import * as owned from "./owned/structs";
import * as payments from "./payments/structs";
import * as transfers from "./transfers/structs";
import * as treasury from "./treasury/structs";
import * as upgradePolicies from "./upgrade-policies/structs";
import {StructClassLoader} from "../_framework/loader";

export function registerClasses(loader: StructClassLoader) { loader.register(config.ConfigAction);
loader.register(config.ConfigDepsProposal);
loader.register(config.ConfigNameProposal);
loader.register(config.ConfigRulesProposal);
loader.register(owned.ReturnAction);
loader.register(owned.WithdrawAction);
loader.register(currency.BurnAction);
loader.register(currency.BurnProposal);
loader.register(currency.Burned);
loader.register(currency.CurrencyKey);
loader.register(currency.CurrencyLock);
loader.register(currency.ManageCurrency);
loader.register(currency.MintAction);
loader.register(currency.MintProposal);
loader.register(currency.Minted);
loader.register(currency.UpdateAction);
loader.register(currency.UpdateProposal);
loader.register(kiosk.KioskOwnerKey);
loader.register(kiosk.KioskOwnerLock);
loader.register(kiosk.ListAction);
loader.register(kiosk.ListProposal);
loader.register(kiosk.ManageKiosk);
loader.register(kiosk.TakeAction);
loader.register(kiosk.TakeProposal);
loader.register(treasury.ManageTreasury);
loader.register(treasury.OpenAction);
loader.register(treasury.OpenProposal);
loader.register(treasury.SpendAction);
loader.register(treasury.SpendProposal);
loader.register(treasury.Treasury);
loader.register(treasury.TreasuryKey);
loader.register(payments.ClaimCap);
loader.register(payments.PayAction);
loader.register(payments.PayProposal);
loader.register(payments.Stream);
loader.register(payments.StreamCreated);
loader.register(transfers.TransferAction);
loader.register(transfers.TransferCoinProposal);
loader.register(transfers.TransferObjectsProposal);
loader.register(upgradePolicies.ManageUpgrades);
loader.register(upgradePolicies.RestrictAction);
loader.register(upgradePolicies.RestrictProposal);
loader.register(upgradePolicies.Restricted);
loader.register(upgradePolicies.TimeLock);
loader.register(upgradePolicies.TimeLockKey);
loader.register(upgradePolicies.UpgradeAction);
loader.register(upgradePolicies.UpgradeKey);
loader.register(upgradePolicies.UpgradeLock);
loader.register(upgradePolicies.UpgradeProposal);
loader.register(upgradePolicies.Upgraded);
 }
